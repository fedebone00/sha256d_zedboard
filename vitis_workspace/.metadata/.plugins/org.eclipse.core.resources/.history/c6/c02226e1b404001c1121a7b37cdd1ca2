/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>
#include "platform.h"
#include "xil_io.h"
#include "xil_printf.h"
#include "multi_sha256d_axi_ip_intr.h"
#include "xscugic.h"

#define base (void*)0x43C10000

XScuGic InterruptController;
static XScuGic_Config *GicConfig;

void ExtIrq_Handler(void *InstancePtr)
{
	char output[50], stringResult[65];
	u32 nonce = MULTI_SHA256D_AXI_IP_INTR_mReadReg(XPAR_MULTI_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, MULTI_SHA256D_AXI_IP_INTR_S00_AXI_SLV_REG0_OFFSET);
	for(int i=8; i>=1; --i){
		u32 result = MULTI_SHA256D_AXI_IP_INTR_mReadReg(XPAR_MULTI_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, i*4);
		snprintf(stringResult+(8*(7-i)), 9, "%08lx", result);
	}
	snprintf(output, 50, "nonce: %#08lx\n", nonce);
	xil_printf("Irq_Handler\r\n");
	xil_printf(output);
	xil_printf(stringResult);
	MULTI_SHA256D_AXI_IP_INTR_ACK(base);
}

int SetUpInterruptSystem(XScuGic *XScuGicInstancePtr)
{
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, (Xil_ExceptionHandler) XScuGic_InterruptHandler, XScuGicInstancePtr);
	Xil_ExceptionEnable();
	return XST_SUCCESS;
}

int interrupt_init()
{
	int Status;



	GicConfig = XScuGic_LookupConfig(XPAR_PS7_SCUGIC_0_DEVICE_ID);
	if (NULL == GicConfig) {
		return XST_FAILURE;
	}
	Status = XScuGic_CfgInitialize(&InterruptController, GicConfig, GicConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = SetUpInterruptSystem(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XScuGic_Connect(&InterruptController, XPAR_FABRIC_MULTI_SHA256D_AXI_IP_0_IRQ_INTR, (Xil_ExceptionHandler)ExtIrq_Handler, (void *)NULL);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XScuGic_Enable(&InterruptController, XPAR_FABRIC_MULTI_SHA256D_AXI_IP_0_IRQ_INTR);

	MULTI_SHA256D_AXI_IP_INTR_EnableInterrupt(base);

	return XST_SUCCESS;
}

int main()
{
	char data[153] = "0100000081cd02ab7e569e8bcd9317e2fe99f2de44d49ab2b8851ba4a308000000000000e320b6c2fffc8d750423db8b1eb942ae710e951ed797f7affc8892b0f1fc122bc7f5d74df2b9441a";
	char target[65] = "0000000000000000000000000000000000000000000000000000000000000099";
	char input[9];
	int i;
	u32 result;

	input[8] = 0;

    init_platform();

    interrupt_init();


    for(i=0; i<19; ++i){
		strncpy(input, data+(i*8), 8);
		result = strtoul(input, NULL, 16);
		MULTI_SHA256D_AXI_IP_INTR_mWriteReg(XPAR_MULTI_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, i*4, result);
    }

    for(i=0; i<8; ++i){
		strncpy(input, target+(i*8), 8);
		result = strtoul(input, NULL, 16);
		MULTI_SHA256D_AXI_IP_INTR_mWriteReg(XPAR_MULTI_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, MULTI_SHA256D_AXI_IP_INTR_S00_AXI_SLV_REG19_OFFSET + i*4, result);
    }

    MULTI_SHA256D_AXI_IP_INTR_mWriteReg(XPAR_MULTI_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, MULTI_SHA256D_AXI_IP_INTR_S00_AXI_SLV_REG27_OFFSET, 1);

    while(1);

    print("Successfully ran Hello World application");
    cleanup_platform();
    return 0;
}

/*

void clean_stdin(){
	char control = getc(stdin);
	if(control != '\r' && control != '\n' && control != EOF){
		ungetc(control, stdin);
	}
}

int _meetsTarget(const char* result, const char* target){
	unsigned dataByte, targetByte;
    char dataByteStr[3];
    char targetByteStr[3];
    dataByteStr[2] = 0;
    targetByteStr[2] = 0;

	for(int i=strlen(result)/2 - 1; i>=0; --i){
		strncpy(dataByteStr, result+(i*2), 2);
		dataByte = (unsigned)strtoul(dataByteStr, NULL, 16);

		strncpy(targetByteStr, target+(i*2), 2);
		targetByte = (unsigned)strtoul(targetByteStr, NULL, 16);

		if((dataByte & 0xff) > (targetByte & 0xff))
			return 0;
		if((dataByte & 0xff) < (targetByte & 0xff))
			return 1;
	}
}


int _main()
{
	int i;
    u32 result;
    char stringResult[65];
    char input[9];
    char cmd[50];

    char data[153];
    char target[66];

    input[8] = 0;
    data[152] = 0;
    target[65] = 0;

	init_platform();

    while(1){
    	//fflush(stdin);

    	//clean_stdin();

    	fgets(data, 153, stdin);
    	fgets(target, 66, stdin);
        target[64] = 0;

    	//write first 18 registers (always the same for a given data)
		for(i=0; i<19; ++i){
			strncpy(input, data+(i*8), 8);
			result = strtoul(input, NULL, 16);
			SHA256D_AXI_IP_mWriteReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, i*4, result);
		}

    	for(u32 nonce=0; nonce<ULONG_MAX; ++nonce){
    		//every 1000 nonce check if there is new block found
    		if(nonce > 0 && nonce % 1000 == 0){
    			//clean_stdin();
    			print("<NB>\n");
    			fgets(cmd, 5, stdin);
    			if(strstr(cmd, "<Y>") != NULL){
    				print("<ACK>\n");
    				//new block fuond
    				break;
    			}
    		}

    		//write last register (19) that contains the nonce
    		snprintf(input, 9, "%08lx", __builtin_bswap32(nonce));
			result = strtoul(input, NULL, 16);
			SHA256D_AXI_IP_mWriteReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, SHA256D_AXI_IP_S00_AXI_SLV_REG19_OFFSET, result);

			//write 0x1 in the last register (20) to start the computation
			SHA256D_AXI_IP_mWriteReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, SHA256D_AXI_IP_S00_AXI_SLV_REG20_OFFSET, (u32)1);

			//wait for the result
			while(1){
				result = SHA256D_AXI_IP_mReadReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, SHA256D_AXI_IP_S00_AXI_SLV_REG20_OFFSET);
				//printf("%lu == %lu\n", result, (u32)1);
				if(result==(u32)1){
					break;
				}
			}

			//while(1);

			for(i=7; i>=0; --i){
				result = SHA256D_AXI_IP_mReadReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, i*4);
				snprintf(stringResult+(8*(7-i)), 9, "%08lx", result);
			}

			//write 0x0 in the last register (20)
			SHA256D_AXI_IP_mWriteReg(XPAR_SHA256D_AXI_IP_0_S00_AXI_BASEADDR, SHA256D_AXI_IP_S00_AXI_SLV_REG20_OFFSET, (u32)0);

			stringResult[64] = 0;

			if(meetsTarget(stringResult, target))
			{
				printf("<NNC>%08lx\n", nonce);
				break;
			}

    	}
    }


    cleanup_platform();
    return 0;
}

*/
